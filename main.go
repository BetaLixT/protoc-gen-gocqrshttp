package main

import (
	"fmt"
	"strings"
	"unicode"

	// "google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	// "google.golang.org/protobuf/proto"
	// "google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if f.Generate {
				if err := GenerateFile(p, f); err != nil {
					return err
				}
			}
		}

		return nil
	})
}

func GenerateFile(
	plugin *protogen.Plugin,
	file *protogen.File,
) error {
	isGenerated := false
	for _, srv := range file.Services {
		for _, method := range srv.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			isGenerated = true
		}
	}

	if !isGenerated {
		return nil
	}
	plugin.SupportedFeatures = 1

	filename := file.GeneratedFilenamePrefix + ".http.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-gohttp. DO NOT EDIT.")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)

	// imports
	g.P("import (")
	g.P("\t\"context\"")
	g.P("\t\"github.com/valyala/fasthttp\"")
	g.P(")")

	cnqs := map[string]struct{}{}
	for _, srv := range file.Services {
		// if err := genService(g, srv); err != nil {
		// 	return err
		// }
		intname := srv.GoName + "HTTPServer"
		g.P(fmt.Sprintf("// %s", srv.GoName))
		g.P("type ", intname, " interface {")
		for _, rpc := range srv.Methods {
			g.Write([]byte(rpc.Comments.Leading.String()))
			g.P("\t", rpc.GoName, "(context.Context, *", rpc.Input.GoIdent.GoName, ") (*", rpc.Output.GoIdent.GoName, ", error)")
			g.Write([]byte(rpc.Comments.Trailing.String()))
		}
		g.P("}")
	}

	g.P("type handler struct {")
	for idx, srv := range file.Services {
		g.P("svc", idx, " ", srv.GoName + "HTTPServer")
	}
	g.P("}")

	g.P("func (h *handler) handle(ctx *fasthttp.RequestCtx) {")
	g.P("path := string(ctx.Path())")
	g.P("switch path {")
	for _, srv := range file.Services {
		// if err := genService(g, srv); err != nil {
		for _, rpc := range srv.Methods {
			g.Write([]byte(rpc.Comments.Leading.String()))

			if _, ok := cnqs[rpc.Input.GoIdent.GoName]; !ok {
				cnqs[rpc.Input.GoIdent.GoName] = struct{}{}
			} else {
				return fmt.Errorf("command/query used multiple times %s", rpc.Input.GoIdent.GoName)
			}

			var path string
			if strings.Contains(rpc.Input.GoIdent.GoName, "Command") {
				cmd := toLower(strings.TrimSuffix(rpc.Input.GoIdent.GoName, "Command"))
				path = "/commands/" + cmd
			} else if strings.Contains(rpc.Input.GoIdent.GoName, "Query") {
				cmd := toLower(strings.TrimSuffix(rpc.Input.GoIdent.GoName, "Query"))
				path = "/queries/" + cmd
			} else {
				return fmt.Errorf("non command/query model used as input %s", rpc.Input.GoIdent.GoName)
			}

			g.P("case \"", path, "\":")
			g.Write([]byte(rpc.Comments.Trailing.String()))
		}	
	}
	g.P("}")
	g.P("}")

	return nil
}

// func (ctrl *GroupsController) RegisterRoutes(grp *gin.RouterGroup) {
// 	grp.POST("/groups/callback", ctrl.handleGroupChange)
// }

type request struct {
	Method  string
	Path    string
	Handler string
}

func toLower(in string) (out string) {
	inr := []rune(in)
	inr[0] = unicode.ToLower(inr[0])
	out = string(inr)
	return
}
